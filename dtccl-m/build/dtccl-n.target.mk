# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := dtccl-n
DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=dtccl-n' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-std=c++11 \
	-Ibase64/include \
	-pedantic \
	-DBUFFERSIZE=65536 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug :=

INCS_Debug := \
	-I/home/deployAgent/.node-gyp/0.12.6/src \
	-I/home/deployAgent/.node-gyp/0.12.6/deps/uv/include \
	-I/home/deployAgent/.node-gyp/0.12.6/deps/v8/include \
	-I$(srcdir)/node_modules/nan \
	-I$(srcdir)/-I/usr/local/include/opencv \
	-I$(srcdir)/-I/usr/local/include \
	-I$(srcdir)/base64/include

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=dtccl-n' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-std=c++11 \
	-Ibase64/include \
	-pedantic \
	-DBUFFERSIZE=65536 \
	-O3 \
	-ffunction-sections \
	-fdata-sections \
	-fno-tree-vrp \
	-fno-tree-sink \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release :=

INCS_Release := \
	-I/home/deployAgent/.node-gyp/0.12.6/src \
	-I/home/deployAgent/.node-gyp/0.12.6/deps/uv/include \
	-I/home/deployAgent/.node-gyp/0.12.6/deps/v8/include \
	-I$(srcdir)/node_modules/nan \
	-I$(srcdir)/-I/usr/local/include/opencv \
	-I$(srcdir)/-I/usr/local/include \
	-I$(srcdir)/base64/include

OBJS := \
	$(obj).target/$(TARGET)/dtccl-n.o \
	$(obj).target/$(TARGET)/myobject.o \
	$(obj).target/$(TARGET)/DTCCL.o \
	$(obj).target/$(TARGET)/fastcluster/fastcluster.o \
	$(obj).target/$(TARGET)/base64/src/cdecode.o \
	$(obj).target/$(TARGET)/base64/src/cencode.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS := \
	/usr/local/lib/libopencv_adas.so \
	/usr/local/lib/libopencv_bgsegm.so \
	/usr/local/lib/libopencv_bioinspired.so \
	/usr/local/lib/libopencv_calib3d.so \
	/usr/local/lib/libopencv_ccalib.so \
	/usr/local/lib/libopencv_core.so \
	/usr/local/lib/libopencv_datasets.so \
	/usr/local/lib/libopencv_face.so \
	/usr/local/lib/libopencv_features2d.so \
	/usr/local/lib/libopencv_flann.so \
	/usr/local/lib/libopencv_highgui.so \
	/usr/local/lib/libopencv_imgcodecs.so \
	/usr/local/lib/libopencv_imgproc.so \
	/usr/local/lib/libopencv_latentsvm.so \
	/usr/local/lib/libopencv_line_descriptor.so \
	/usr/local/lib/libopencv_ml.so \
	/usr/local/lib/libopencv_objdetect.so \
	/usr/local/lib/libopencv_optflow.so \
	/usr/local/lib/libopencv_photo.so \
	/usr/local/lib/libopencv_reg.so \
	/usr/local/lib/libopencv_rgbd.so \
	/usr/local/lib/libopencv_saliency.so \
	/usr/local/lib/libopencv_shape.so \
	/usr/local/lib/libopencv_stereo.so \
	/usr/local/lib/libopencv_stitching.so \
	/usr/local/lib/libopencv_superres.so \
	/usr/local/lib/libopencv_surface_matching.so \
	/usr/local/lib/libopencv_text.so \
	/usr/local/lib/libopencv_tracking.so \
	/usr/local/lib/libopencv_videoio.so \
	/usr/local/lib/libopencv_video.so \
	/usr/local/lib/libopencv_videostab.so \
	/usr/local/lib/libopencv_xfeatures2d.so \
	/usr/local/lib/libopencv_ximgproc.so \
	/usr/local/lib/libopencv_xobjdetect.so \
	/usr/local/lib/libopencv_xphoto.so

$(obj).target/dtccl-n.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/dtccl-n.node: LIBS := $(LIBS)
$(obj).target/dtccl-n.node: TOOLSET := $(TOOLSET)
$(obj).target/dtccl-n.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/dtccl-n.node
# Add target alias
.PHONY: dtccl-n
dtccl-n: $(builddir)/dtccl-n.node

# Copy this to the executable output path.
$(builddir)/dtccl-n.node: TOOLSET := $(TOOLSET)
$(builddir)/dtccl-n.node: $(obj).target/dtccl-n.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/dtccl-n.node
# Short alias for building this executable.
.PHONY: dtccl-n.node
dtccl-n.node: $(obj).target/dtccl-n.node $(builddir)/dtccl-n.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/dtccl-n.node

